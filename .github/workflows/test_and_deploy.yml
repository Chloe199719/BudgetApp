name: Test and Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Prod
    env:
      SQLX_VERSION: 0.7.2
      SQLX_FEATURES: "rustls,postgres"
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked

      - name: Execute migration
        run: |
          sqlx database create
          sqlx migrate run

      - name: Setup config
        run: |
          envsubst < settings/base.example.yaml > settings/base.yaml &&
          envsubst < settings/production.example.yaml > settings/production.yaml
        env:
          EMAIL_HOST: ${{ vars.EMAIL_HOST }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_USER_PASSWORD: ${{ secrets.EMAIL_HOST_USER_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TOKEN_EXPIRATION: ${{ vars.TOKEN_EXPIRATION }}
          HMAC_SECRET: ${{ secrets.HMAC_SECRET }}
          FRONTEND_URL: ${{ vars.FRONTEND_URL }}

      #     command: fmt
      #     args: -- --check
      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: chloe1997/discord-backend:latest
          cache-from: type=registry,ref=chloe1997/discord-backend:latest
          cache-to: type=inline
  deploy:
    needs: build
    environment: Prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup config
        run: |
          envsubst < settings/base.example.yaml > settings/base.yaml &&
          envsubst < settings/production.example.yaml > settings/production.yaml
        env:
          EMAIL_HOST: ${{ vars.EMAIL_HOST }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_USER_PASSWORD: ${{ secrets.EMAIL_HOST_USER_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TOKEN_EXPIRATION: ${{ vars.TOKEN_EXPIRATION }}
          HMAC_SECRET: ${{ secrets.HMAC_SECRET }}
          FRONTEND_URL: ${{ vars.FRONTEND_URL }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Install Sshpass
        run: sudo apt-get install sshpass

      - name: Copy docker-compose.yml to Linode
        run: sshpass -v -p ${{ secrets.LINODE_PASSWORD }} scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.LINODE_USERNAME }}@${{ vars.LINODE_HOST }}:~

      - name: Copy base.yaml to Linode
        run: sshpass -v -p ${{ secrets.LINODE_PASSWORD }} scp -o StrictHostKeyChecking=no settings/production.yaml ${{ secrets.LINODE_USERNAME }}@${{ vars.LINODE_HOST }}:~

      - name: Copy production.yaml to Linode
        run: sshpass -v -p ${{ secrets.LINODE_PASSWORD }} scp -o StrictHostKeyChecking=no settings/base.yaml ${{ secrets.LINODE_USERNAME }}@${{ vars.LINODE_HOST }}:~

      - name: Deploy to Linode
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.LINODE_HOST }}
          username: ${{ secrets.LINODE_USERNAME }}
          password: ${{ secrets.LINODE_PASSWORD }}
          script: |
            cd ~
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export DATABASE_URL=${{ secrets.DATABASE_URL }}

            docker compose down  || true
            docker compose pull
            docker compose up -d --force-recreate

  testing:
    environment: Prod
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check http code Status
        uses: lakuapik/gh-actions-http-status@v1
        with:
          sites: '["https://${{ vars.LINODE_HOST }}:5000/health-check"]'
          expected: "[200,301]"
